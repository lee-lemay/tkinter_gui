#!/usr/bin/env python3
"""
Phase 3 Test Script

This script tests the Phase 3 implementation: Data Management
- Directory selection dialog
- Dataset discovery and listing
- Mock business logic interface implementation
- Left panel dataset overview implementation
- Dataset selection and focus controls
"""

import sys
from pathlib import Path

# Add the application directory to the Python path
app_dir = Path(__file__).parent
sys.path.insert(0, str(app_dir))

def test_business_logic_interface():
    """Test the business logic interface components."""
    print("Testing business logic interface...")
    
    try:
        # Test abstract interface import
        from src.business.data_interface import DataInterface, MockDataInterface
        from src.business.data_interface import ValidationResults, SummaryStats, ErrorMetrics
        
        print("‚úì Business logic interfaces imported successfully")
        
        # Test mock implementation
        mock_interface = MockDataInterface()
        print("‚úì Mock data interface created")
        
        # Test with sample dataset
        test_dataset_path = Path("data/sample_dataset_alpha")
        if test_dataset_path.exists():
            dataframes = mock_interface.load_dataset(test_dataset_path)
            print(f"‚úì Mock data loading: {len(dataframes)} data types loaded")
            
            # Test validation
            validation = mock_interface.validate_dataset(dataframes)
            print(f"‚úì Mock validation: {validation.is_valid}, {len(validation.jobs_available)} jobs available")
            
            # Test summary
            summary = mock_interface.get_dataset_summary(dataframes)
            print(f"‚úì Mock summary: {summary.num_tracks} tracks, {summary.num_detections} detections")
        
        return True
        
    except Exception as e:
        print(f"‚úó Business logic interface test failed: {e}")
        return False

def test_dataset_scanner():
    """Test the dataset scanner utility."""
    print("\\nTesting dataset scanner...")
    
    try:
        from src.utils.dataset_scanner import DatasetScanner
        from src.models.application_state import DatasetInfo, DatasetStatus
        
        print("‚úì Dataset scanner imported successfully")
        
        # Test scanner creation
        scanner = DatasetScanner()
        print("‚úì Dataset scanner created")
        
        # Test scanning data directory
        data_dir = Path("data")
        if data_dir.exists():
            datasets = scanner.scan_directory(data_dir)
            print(f"‚úì Dataset discovery: Found {len(datasets)} datasets")
            
            # Test validation of specific dataset
            if datasets:
                sample_dataset = datasets[0]
                validation = scanner.validate_dataset_structure(sample_dataset.path)
                print(f"‚úì Dataset structure validation completed")
                
                file_info = scanner.get_dataset_file_info(sample_dataset.path)
                print(f"‚úì Dataset file info: {len(file_info)} categories analyzed")
        
        return True
        
    except Exception as e:
        print(f"‚úó Dataset scanner test failed: {e}")
        return False

def test_application_controller_updates():
    """Test the updated application controller functionality."""
    print("\\nTesting application controller updates...")
    
    try:
        from src.models.application_state import ApplicationState
        from src.controllers.application_controller import ApplicationController
        
        # Create minimal test setup
        model = ApplicationState()
        
        # Mock view for testing
        class MockView:
            def show_info(self, title, message): pass
            def show_error(self, title, message): pass
            def on_state_changed(self, event): pass
            def get_root(self): return None
        
        view = MockView()
        controller = ApplicationController(model, view)
        
        print("‚úì Updated application controller created")
        
        # Test dataset management methods
        if hasattr(controller, 'dataset_scanner'):
            print("‚úì Dataset scanner integrated")
        
        if hasattr(controller, 'data_interface'):
            print("‚úì Data interface integrated")
        
        if hasattr(controller, 'load_dataset_directory'):
            print("‚úì Directory loading method available")
            
        if hasattr(controller, 'set_focus_dataset'):
            print("‚úì Focus dataset management available")
            
        if hasattr(controller, 'toggle_dataset_selection'):
            print("‚úì Dataset selection management available")
        
        return True
        
    except Exception as e:
        print(f"‚úó Application controller test failed: {e}")
        return False

def test_left_panel_updates():
    """Test the updated left panel functionality."""
    print("\\nTesting left panel updates...")
    
    try:
        import tkinter as tk
        from src.components.left_panel import LeftPanel
        
        # Create minimal tkinter setup for testing
        root = tk.Tk()
        root.withdraw()  # Hide the window
        
        # Create a frame to serve as parent for left panel
        parent_frame = tk.Frame(root)
        
        # Create left panel
        panel = LeftPanel(parent_frame)
        print("‚úì Updated left panel created")
        
        # Check for required UI elements
        if hasattr(panel, 'dataset_tree'):
            print("‚úì Dataset tree widget available")
            
        if hasattr(panel, '_on_dataset_double_click'):
            print("‚úì Dataset loading on double-click implemented")
            
        if hasattr(panel, '_get_selected_dataset_names'):
            print("‚úì Dataset selection tracking implemented")
            
        if hasattr(panel, '_update_focus_info'):
            print("‚úì Focus dataset information display implemented")
        
        # Clean up
        root.destroy()
        
        return True
        
    except Exception as e:
        print(f"‚úó Left panel test failed: {e}")
        return False

def test_integration_with_phase2_data():
    """Test integration with Phase 2 generated data."""
    print("\\nTesting integration with Phase 2 data...")
    
    try:
        from src.utils.dataset_scanner import DatasetScanner
        from src.business.data_interface import MockDataInterface
        
        # Check if Phase 2 data exists
        data_dir = Path("data")
        if not data_dir.exists():
            print("‚ö† No data directory found - Phase 2 data may not be generated")
            return True
        
        scanner = DatasetScanner()
        datasets = scanner.scan_directory(data_dir)
        
        if not datasets:
            print("‚ö† No datasets found in data directory")
            return True
        
        print(f"‚úì Found {len(datasets)} datasets from Phase 2")
        
        # Test loading one dataset
        mock_interface = MockDataInterface()
        sample_dataset = datasets[0]
        
        dataframes = mock_interface.load_dataset(sample_dataset.path)
        print(f"‚úì Successfully loaded dataset: {sample_dataset.name}")
        print(f"  - Data types: {list(dataframes.keys())}")
        
        for data_type, df in dataframes.items():
            if df is not None and not df.empty:
                print(f"  - {data_type}: {len(df)} records")
        
        return True
        
    except Exception as e:
        print(f"‚úó Phase 2 integration test failed: {e}")
        return False

def main():
    """Run all Phase 3 tests."""
    print("Phase 3: Data Management - Test Suite")
    print("=" * 50)
    
    success = True
    
    # Test individual components
    success &= test_business_logic_interface()
    success &= test_dataset_scanner()
    success &= test_application_controller_updates()
    success &= test_left_panel_updates()
    success &= test_integration_with_phase2_data()
    
    print("\\n" + "=" * 50)
    if success:
        print("üéâ ALL PHASE 3 TESTS PASSED!")
        print("‚úÖ Directory selection dialog framework ready")
        print("‚úÖ Dataset discovery and listing implemented")
        print("‚úÖ Mock business logic interface working")
        print("‚úÖ Left panel dataset overview functional")
        print("‚úÖ Dataset selection and focus controls active")
        print("\\nüöÄ Phase 3 implementation is COMPLETE!")
        print("\\nTo test the full application:")
        print("  1. Run: python main.py")
        print("  2. Use File -> Open Dataset Directory")
        print("  3. Select the 'data' directory")
        print("  4. Interact with datasets in the left panel")
    else:
        print("‚ùå Some Phase 3 tests failed")
        print("Please check the implementation and try again")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
